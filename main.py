"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""
import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import settings
from src.bot.bot import MedicalBot
from src.database.client import get_supabase_client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('medical_bot.log')
    ]
)

logger = logging.getLogger(__name__)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    import os
    import time
    
    try:
        start_time = time.time()
        logger.info("üöÄ Starting Medical AI Analyzer Bot...")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"üêç Python version: {sys.version}")
        logger.info(f"üíª Platform: {sys.platform}")
        logger.info(f"üöÇ Railway environment: {os.environ.get('RAILWAY_ENVIRONMENT', 'local')}")
        logger.info(f"üìÇ Working directory: {os.getcwd()}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"‚öôÔ∏è App host: {settings.app_host}")
        logger.info(f"‚öôÔ∏è App port: {settings.app_port}")
        logger.info(f"‚öôÔ∏è Log level: {settings.log_level}")
        logger.info(f"‚öôÔ∏è Webhook URL: {settings.telegram_webhook_url or '–Ω–µ –∑–∞–¥–∞–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞)
        logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        if not settings.supabase_url.startswith("https://demo"):
            supabase_client = get_supabase_client()
            if not await supabase_client.test_connection():
                logger.warning("‚ö†Ô∏è Failed to connect to Supabase - continuing in demo mode")
            else:
                logger.info("‚úÖ Supabase connection successful")
        else:
            logger.info("üé≠ Running in demo mode - skipping database connection")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –°–æ–∑–¥–∞—ë–º MedicalBot...")
        bot = MedicalBot()
        logger.info(f"üé≠ Demo mode: {bot.demo_mode}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
        if bot.demo_mode:
            logger.info("üé≠ Application started in demo mode. Waiting...")
            # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            while True:
                await asyncio.sleep(60)
                logger.info("üé≠ Demo mode: Still running...")
        elif settings.telegram_webhook_url:
            # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook —Ä–µ–∂–∏–º–∞
            import os
            import uvicorn
            from src.api.webapp import app
            
            # –ö–†–ò–¢–ò–ß–ù–û: Railway –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ $PORT
            railway_port = os.environ.get('PORT', settings.app_port)
            actual_host = settings.app_host
            actual_port = int(railway_port)
            
            logger.info("üöÄ Starting FastAPI webhook server")
            logger.info(f"üåç Host: {actual_host}")
            logger.info(f"üîå Port: {actual_port} (Railway PORT env: {os.environ.get('PORT', '–Ω–µ –∑–∞–¥–∞–Ω')})")
            logger.info(f"üìù Log level: {settings.log_level.lower()}")
            logger.info(f"üöÇ Railway environment: {os.environ.get('RAILWAY_ENVIRONMENT', '–Ω–µ –∑–∞–¥–∞–Ω')}")
            logger.info(f"üîó Webhook URL: {settings.telegram_webhook_url}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å Railway-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            config = uvicorn.Config(
                app,
                host="0.0.0.0",        # Explicit binding –¥–ª—è Railway
                port=actual_port,      # $PORT –æ—Ç Railway
                log_level=settings.log_level.lower(),
                access_log=True,       # –í–∫–ª—é—á–∞–µ–º access –ª–æ–≥–∏
                use_colors=False,      # –û—Ç–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è Railway –ª–æ–≥–æ–≤
                server_header=False,   # –£–±–∏—Ä–∞–µ–º server header
                timeout_keep_alive=30, # Keep-alive timeout
                timeout_graceful_shutdown=30,  # Graceful shutdown
                workers=1,             # Single worker –¥–ª—è Railway
                loop="asyncio",        # Explicit event loop
                interface="asgi3",     # ASGI3 interface
                reload=False,          # Disable reload in production
                limit_concurrency=100, # Connection limit
                limit_max_requests=1000,  # Request limit per worker
                backlog=2048           # Socket backlog
            )
            server = uvicorn.Server(config)
            
            logger.info(f"üéØ –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å –Ω–∞ {actual_host}:{actual_port}")
            
            # Railway –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            logger.info(f"üöÇ Railway PORT env var: {os.environ.get('PORT', '–Ω–µ –∑–∞–¥–∞–Ω')}")
            logger.info(f"üåê Railway URL env var: {os.environ.get('RAILWAY_PUBLIC_DOMAIN', '–Ω–µ –∑–∞–¥–∞–Ω')}")
            logger.info(f"üîó Full Railway URL: https://{os.environ.get('RAILWAY_PUBLIC_DOMAIN', 'unknown')}")
            logger.info(f"‚öôÔ∏è Uvicorn config: workers=1, interface=asgi3, backlog=2048")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
            import socket
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.bind((actual_host, actual_port))
                sock.close()
                logger.info(f"‚úÖ Port {actual_port} is available for binding")
            except OSError as e:
                logger.warning(f"‚ö†Ô∏è Port {actual_port} binding check failed: {e}")
            
            await server.serve()
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            logger.info("üîÑ Starting bot in polling mode")
            await bot.start_polling()
            
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        elapsed = time.time() - start_time
        logger.info(f"üéâ Application started successfully in {elapsed:.2f} seconds")
            
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"üí• CRITICAL ERROR starting bot: {e}")
        logger.error(f"üîç Error type: {type(e).__name__}")
        logger.error(f"üìç Error details: {str(e)}")
        import traceback
        logger.error(f"üìã Full traceback: {traceback.format_exc()}")
        raise  # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á—Ç–æ–±—ã Railway –≤–∏–¥–µ–ª failure


if __name__ == "__main__":
    asyncio.run(main()) 