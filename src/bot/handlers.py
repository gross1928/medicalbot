"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    CallbackQueryHandler, filters, ContextTypes
)

from src.database import UserRepository, AnalysisRepository
from src.models import UserCreate
from src.ai.analyzer import MedicalAnalyzer
from src.file_processing.processor import FileProcessor

logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_repo = UserRepository()
    
    try:
        existing_user = await user_repo.get_user_by_telegram_id(user.id)
        if not existing_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = UserCreate(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            await user_repo.create_user(user_data)
            logger.info(f"New user registered: {user.id}")
    
    except Exception as e:
        logger.error(f"Error registering user: {e}")
    
    welcome_message = """
üè• **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ò–ò-–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è.

**–ß—Ç–æ —è —É–º–µ—é:**
üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∫—Ä–æ–≤–∏, –º–æ—á–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
ü§ñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –ò–ò
üí° –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é, —Å–ø–æ—Ä—Ç—É –∏ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏
üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –≤–∞—à–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏
2. –Ø –∏–∑–≤–ª–µ–∫—É –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

**‚ö†Ô∏è –í–∞–∂–Ω–æ:** –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞!

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –∞–Ω–∞–ª–∏–∑–∞–º–∏! üìã
"""
    
    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="upload_guide")],
        [InlineKeyboardButton("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help")],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_message = """
üìö **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ PDF —Ñ–∞–π–ª—ã (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π)  
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ (JPG, PNG, JPEG)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–Ω–∞–ª–∏–∑—ã:**
‚Ä¢ –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏
‚Ä¢ –ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏
‚Ä¢ –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏
‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
/history - –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
/profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è

**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
1. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ/—Å–∫–∞–Ω—ã
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–µ–º
3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º.
"""
    
    await update.message.reply_text(help_message, parse_mode='Markdown')


async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user_id = update.effective_user.id
    user_repo = UserRepository()
    
    try:
        user = await user_repo.get_user_by_telegram_id(user_id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user.age or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ü–æ–ª: {user.gender or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –†–æ—Å—Ç: {user.height or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
‚Ä¢ –í–µ—Å: {user.weight or '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ, –ø–æ–ª–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.
"""
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            profile_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error getting user profile: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")


async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    user_id = update.effective_user.id
    user_repo = UserRepository()
    analysis_repo = AnalysisRepository()
    
    try:
        user = await user_repo.get_user_by_telegram_id(user_id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        analyses = await analysis_repo.get_user_analyses(user.id, limit=10)
        
        if not analyses:
            await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.")
            return
        
        history_text = "üìä **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤:**\n\n"
        
        for i, analysis in enumerate(analyses, 1):
            status_emoji = {
                "completed": "‚úÖ",
                "processing": "‚è≥",
                "failed": "‚ùå",
                "pending": "üïê"
            }.get(analysis.status, "‚ùì")
            
            history_text += f"{i}. {status_emoji} **{analysis.original_filename}**\n"
            history_text += f"   üìÖ {analysis.uploaded_at.strftime('%d.%m.%Y %H:%M')}\n"
            history_text += f"   üìã –°—Ç–∞—Ç—É—Å: {analysis.status}\n\n"
        
        await update.message.reply_text(history_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error getting user history: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.")


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    user_id = update.effective_user.id
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    max_size_mb = 20
    if document.file_size > max_size_mb * 1024 * 1024:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size_mb} –ú–ë"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    from config.settings import settings
    allowed_types = settings.supported_file_types
    file_extension = document.file_name.split('.')[-1].lower()
    
    if file_extension not in allowed_types:
        await update.message.reply_text(
            f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(allowed_types).upper()}"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await update.message.reply_text(
        "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ñ–∞–π–ª... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    )
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file_processor = FileProcessor()
        analysis_result = await file_processor.process_file(
            document, user_id, update.effective_chat.id
        )
        
        if analysis_result:
            await processing_message.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            analyzer = MedicalAnalyzer()
            recommendations = await analyzer.analyze_results(analysis_result)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_analysis_results(update, analysis_result, recommendations)
        else:
            await processing_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ."
            )
    
    except Exception as e:
        logger.error(f"Error processing document: {e}")
        await processing_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = update.effective_user.id
    photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    
    processing_message = await update.message.reply_text(
        "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–Ω–∞–ª–∏–∑–∞..."
    )
    
    try:
        file_processor = FileProcessor()
        analysis_result = await file_processor.process_photo(
            photo, user_id, update.effective_chat.id
        )
        
        if analysis_result:
            await processing_message.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            analyzer = MedicalAnalyzer()
            recommendations = await analyzer.analyze_results(analysis_result)
            
            await send_analysis_results(update, analysis_result, recommendations)
        else:
            await processing_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. "
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–∏–π –∏ —á–∏—Ç–∞–µ–º—ã–π."
            )
    
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")


async def send_analysis_results(update: Update, analysis, recommendations):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞**\n\n"
        
        if analysis.biomarkers:
            report += "**–í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
            for biomarker in analysis.biomarkers[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                status_emoji = {
                    "normal": "‚úÖ",
                    "low": "üîΩ",
                    "high": "üîº",
                    "critical_low": "‚ö†Ô∏è",
                    "critical_high": "‚ö†Ô∏è"
                }.get(biomarker.status, "‚ùì")
                
                report += f"{status_emoji} **{biomarker.name}**: {biomarker.value}"
                if biomarker.unit:
                    report += f" {biomarker.unit}"
                report += "\n"
        
        report += "\nüí° **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        
        if recommendations:
            for rec in recommendations[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                category_emoji = {
                    "nutrition": "ü•ó",
                    "exercise": "üí™",
                    "supplements": "üíä",
                    "lifestyle": "üèÉ‚Äç‚ôÇÔ∏è",
                    "medical": "üë®‚Äç‚öïÔ∏è"
                }.get(rec.category, "üí°")
                
                report += f"\n{category_emoji} **{rec.category.title()}:**\n"
                report += f"{rec.recommendation_text}\n"
        
        report += "\n‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º!"
        
        await update.message.reply_text(report, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error sending analysis results: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "upload_guide":
        guide_text = """
üìã **–ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏–∑:**

1. **–ù–∞–∂–º–∏—Ç–µ üìé (—Å–∫—Ä–µ–ø–∫–∞)** –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
2. **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª** –∏–ª–∏ **—Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ**
3. **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª** –±–æ—Ç—É
4. **–î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞** (1-3 –º–∏–Ω—É—Ç—ã)

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ PDF —Ñ–∞–π–ª—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π
‚Ä¢ –§–æ—Ç–æ –∞–Ω–∞–ª–∏–∑–æ–≤ (JPG, PNG, JPEG)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë

**–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**
üì∏ –î–µ–ª–∞–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ
üí° –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
üìè –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç
"""
        await query.edit_message_text(guide_text, parse_mode='Markdown')
    
    elif query.data == "help":
        await help_command(update, context)
    
    elif query.data == "profile":
        await profile_command(update, context)


def setup_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("history", history_command))
    
    # –§–∞–π–ª—ã –∏ —Ñ–æ—Ç–æ
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # Inline –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button_callback))
    
    logger.info("All handlers configured successfully") 