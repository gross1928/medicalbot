"""
FastAPI –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook —Ä–µ–∂–∏–º–∞ Telegram –±–æ—Ç–∞
"""
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException, BackgroundTasks
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

from telegram import Update
from telegram.ext import Application

from config.settings import settings
from src.bot.bot import MedicalBot
from src.utils.logging_config import setup_logging, structured_logger

logger = logging.getLogger(__name__)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot_application: Application = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global bot_application
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        logger.info("Starting FastAPI application...")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        medical_bot = MedicalBot()
        bot_application = medical_bot.create_application()
        
        if bot_application:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
            await bot_application.initialize()
            await bot_application.start()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å URL
            if settings.telegram_webhook_url:
                webhook_url = f"{settings.telegram_webhook_url}/webhook/{settings.telegram_bot_token}"
                logger.info(f"üîó –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook: {webhook_url}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Railway proxy
                import asyncio
                logger.info("‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Railway proxy (5 —Å–µ–∫)...")
                await asyncio.sleep(5)
                
                # Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è webhook —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                max_retries = 3
                retry_delay = 10  # —Å–µ–∫—É–Ω–¥
                
                for attempt in range(max_retries):
                    try:
                        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook {attempt + 1}/{max_retries}")
                        
                        await bot_application.bot.set_webhook(
                            url=webhook_url,
                            allowed_updates=["message", "callback_query"],
                            drop_pending_updates=True
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ webhook –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                        await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                        webhook_info = await bot_application.bot.get_webhook_info()
                        
                        if webhook_info.url == webhook_url:
                            logger.info(f"‚úÖ Webhook set successfully to: {webhook_url}")
                            logger.info(f"üìä Webhook info: URL={webhook_info.url}, pending={webhook_info.pending_update_count}")
                            break
                        else:
                            logger.warning(f"‚ö†Ô∏è Webhook URL mismatch: expected={webhook_url}, got={webhook_info.url}")
                            if attempt < max_retries - 1:
                                logger.info(f"‚è≥ Retry —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                                await asyncio.sleep(retry_delay)
                            else:
                                logger.error("‚ùå Failed to set webhook after all retries")
                                
                    except Exception as e:
                        logger.error(f"‚ùå Webhook attempt {attempt + 1} failed: {e}")
                        if attempt < max_retries - 1:
                            logger.info(f"‚è≥ Retry —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                            await asyncio.sleep(retry_delay)
                        else:
                            logger.error("‚ùå Failed to set webhook after all retries")
                            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º startup - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ webhook
            else:
                logger.info("‚ö†Ô∏è No webhook URL configured, running in polling mode")
        else:
            logger.info("Bot application is in demo mode")
        
        logger.info("FastAPI application started successfully")
        
        yield
        
    except Exception as e:
        logger.error(f"Error during startup: {e}")
        raise
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        logger.info("Shutting down FastAPI application...")
        
        if bot_application:
            try:
                # –£–¥–∞–ª—è–µ–º webhook
                await bot_application.bot.delete_webhook(drop_pending_updates=True)
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                await bot_application.stop()
                await bot_application.shutdown()
                
                logger.info("Bot application stopped successfully")
                
            except Exception as e:
                logger.error(f"Error during shutdown: {e}")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Medical AI Bot API",
    description="API –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–∞–ª–∏–∑–æ–≤",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs",  # Swagger UI
    redoc_url="/redoc",  # ReDoc UI
    openapi_url="/openapi.json"
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è Railway
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í production –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Railway"""
    import time
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(f"üåê Incoming request: {request.method} {request.url}")
    logger.info(f"üîç Headers: {dict(request.headers)}")
    logger.info(f"üìç Client: {request.client}")
    
    try:
        response = await call_next(request)
        process_time = time.time() - start_time
        
        logger.info(f"‚úÖ Response: {response.status_code} in {process_time:.4f}s")
        return response
    except Exception as e:
        process_time = time.time() - start_time
        logger.error(f"‚ùå Request failed: {e} in {process_time:.4f}s")
        raise


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    import time
    import os
    
    logger.info("üè† Root endpoint –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω!")
    
    response = {
        "message": "Medical AI Bot API",
        "status": "running",
        "version": "1.0.0",
        "timestamp": time.time(),
        "environment": os.environ.get('RAILWAY_ENVIRONMENT', 'unknown'),
        "port": os.environ.get('PORT', 'unknown'),
        "uptime": "healthy"
    }
    
    logger.info(f"üè† Root endpoint –æ—Ç–≤–µ—Ç: {response}")
    return response

@app.get("/ping") 
async def ping():
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π ping endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import time
    logger.info("üèì Ping –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω!")
    return {"ping": "pong", "timestamp": time.time()}


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Railway
    import os
    import psutil
    import time
    
    logger.info("üè• Health check –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω!")
    logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –æ—Ç: {os.environ.get('RAILWAY_ENVIRONMENT', 'unknown')}")
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        process = psutil.Process()
        memory_info = process.memory_info()
        
        logger.info(f"üíæ Memory usage: {memory_info.rss / 1024 / 1024:.2f} MB")
        logger.info(f"‚ö° CPU percent: {process.cpu_percent()}%")
        logger.info(f"üïí Uptime: {time.time() - process.create_time():.2f} seconds")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        bot_status = "unknown"
        if bot_application and bot_application.running:
            bot_status = "running"
            logger.info("ü§ñ Bot application: RUNNING")
        elif bot_application:
            bot_status = "stopped"
            logger.info("ü§ñ Bot application: STOPPED")
        else:
            bot_status = "not_initialized"
            logger.info("ü§ñ Bot application: NOT_INITIALIZED")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        webhook_url = "none"
        if settings.telegram_webhook_url:
            webhook_url = f"{settings.telegram_webhook_url}/webhook/{settings.telegram_bot_token}"
            logger.info(f"üîó Webhook URL: {webhook_url}")
        else:
            logger.info("üîó Webhook URL: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        logger.info(f"üåç PORT env: {os.environ.get('PORT', '–Ω–µ –∑–∞–¥–∞–Ω')}")
        logger.info(f"üè† HOST env: {os.environ.get('HOST', '–Ω–µ –∑–∞–¥–∞–Ω')}")
        logger.info(f"üöÇ Railway env: {os.environ.get('RAILWAY_ENVIRONMENT', '–Ω–µ –∑–∞–¥–∞–Ω')}")
        
        response_data = {
            "status": "healthy",
            "timestamp": time.time(),
            "bot_status": bot_status,
            "webhook_url": webhook_url,
            "memory_mb": round(memory_info.rss / 1024 / 1024, 2),
            "cpu_percent": process.cpu_percent(),
            "uptime_seconds": round(time.time() - process.create_time(), 2),
            "port": os.environ.get('PORT', settings.app_port),
            "host": settings.app_host,
            "message": "FastAPI server is running and healthy"
        }
        
        logger.info(f"‚úÖ Health check —É—Å–ø–µ—à–µ–Ω! –û—Ç–≤–µ—Ç: {response_data}")
        return response_data
        
    except Exception as e:
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
        # Railway –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –Ω–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞
        logger.error(f"‚ùå Health check internal error: {e}")
        logger.error(f"üîç Error details: {str(e)}")
        
        error_response = {
            "status": "healthy",
            "bot_status": "error", 
            "error": str(e),
            "timestamp": time.time(),
            "message": "FastAPI server is running despite internal errors"
        }
        
        logger.info(f"‚ö†Ô∏è Health check —Å –æ—à–∏–±–∫–æ–π, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK: {error_response}")
        return error_response


@app.post("/webhook/{token}")
async def webhook(token: str, request: Request, background_tasks: BackgroundTasks):
    """Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    
    logger.info(f"üì® WEBHOOK –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω! Token: {token[:10]}...")
    logger.info(f"üîç Request headers: {dict(request.headers)}")
    logger.info(f"üìç Client IP: {request.client}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if token != settings.telegram_bot_token:
        logger.warning(f"‚ùå Invalid webhook token received: {token}")
        logger.warning(f"üìù Expected: {settings.telegram_bot_token[:10]}...")
        raise HTTPException(status_code=403, detail="Invalid token")
    
    logger.info("‚úÖ Webhook token valid")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if not bot_application:
        logger.error("‚ùå Bot application not initialized")
        raise HTTPException(status_code=503, detail="Bot not ready")
    
    logger.info("‚úÖ Bot application ready")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        logger.info("üì• –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram...")
        update_data = await request.json()
        logger.info(f"üìä Update data received: {str(update_data)[:200]}...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        logger.info("üîÑ –°–æ–∑–¥–∞—ë–º Telegram Update –æ–±—ä–µ–∫—Ç...")
        update = Update.de_json(update_data, bot_application.bot)
        
        if update:
            logger.info(f"‚úÖ Update —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ID: {update.update_id}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ update
            if update.effective_user:
                logger.info(f"üë§ User: {update.effective_user.first_name} (ID: {update.effective_user.id})")
            
            if update.effective_message:
                message_text = update.effective_message.text or "no text"
                logger.info(f"üí¨ Message: {message_text[:100]}...")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ update
            if hasattr(structured_logger, 'log_user_action'):
                structured_logger.log_user_action(
                    user_id=update.effective_user.id if update.effective_user else 0,
                    action="webhook_update_received",
                    details={
                        "update_id": update.update_id,
                        "type": update.effective_message.text[:50] if update.effective_message else "callback_query"
                    }
                )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update –≤ —Ñ–æ–Ω–µ
            logger.info("üöÄ –î–æ–±–∞–≤–ª—è–µ–º update –≤ —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            background_tasks.add_task(process_update, update)
            
            logger.info("‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            return {"status": "ok"}
        else:
            logger.warning("‚ùå Invalid update received - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Update –æ–±—ä–µ–∫—Ç")
            return {"status": "error", "message": "Invalid update"}
            
    except Exception as e:
        logger.error(f"üí• –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        logger.error(f"üîç Error type: {type(e).__name__}")
        logger.error(f"üìç Error details: {str(e)}")
        import traceback
        logger.error(f"üìã Full traceback: {traceback.format_exc()}")
        
        if hasattr(structured_logger, 'log_error_event'):
            structured_logger.log_error_event(
                user_id=0,
                error_type="webhook_processing_error",
                error_details=str(e)
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
        return {"status": "error", "message": str(e)}


async def process_update(update: Update):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å update –æ—Ç Telegram"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º update –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await bot_application.update_queue.put(update)
        
    except Exception as e:
        logger.error(f"Error adding update to queue: {e}")


@app.get("/stats")
async def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        webhook_url = "none"
        if settings.telegram_webhook_url:
            webhook_url = f"{settings.telegram_webhook_url}/webhook/{settings.telegram_bot_token}"
            
        stats = {
            "bot_running": bot_application.running if bot_application else False,
            "webhook_url": webhook_url,
        }
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # stats.update(await get_database_stats())
        
        return stats
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "error": str(e)
            }
        )


@app.post("/admin/send_message")
async def admin_send_message(request: Request):
    """–ê–¥–º–∏–Ω—Å–∫–∏–π endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JWT –∏–ª–∏ API –∫–ª—é—á–∏)
    auth_header = request.headers.get("Authorization")
    if not auth_header or not auth_header.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Missing or invalid authorization")
    
    token = auth_header.split(" ")[1]
    if token != settings.admin_token:  # –î–æ–±–∞–≤–∏—Ç—å –≤ settings
        raise HTTPException(status_code=403, detail="Invalid admin token")
    
    try:
        data = await request.json()
        chat_id = data.get("chat_id")
        message = data.get("message")
        
        if not chat_id or not message:
            raise HTTPException(status_code=400, detail="Missing chat_id or message")
        
        if bot_application and bot_application.bot:
            await bot_application.bot.send_message(
                chat_id=chat_id,
                text=message
            )
            
            return {"status": "sent", "chat_id": chat_id}
        else:
            raise HTTPException(status_code=503, detail="Bot not available")
            
    except Exception as e:
        logger.error(f"Error sending admin message: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/admin/webhook_info")
async def get_webhook_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook"""
    try:
        if bot_application and bot_application.bot:
            webhook_info = await bot_application.bot.get_webhook_info()
            
            return {
                "url": webhook_info.url,
                "has_custom_certificate": webhook_info.has_custom_certificate,
                "pending_update_count": webhook_info.pending_update_count,
                "last_error_date": webhook_info.last_error_date,
                "last_error_message": webhook_info.last_error_message,
                "max_connections": webhook_info.max_connections,
                "allowed_updates": webhook_info.allowed_updates
            }
        else:
            raise HTTPException(status_code=503, detail="Bot not available")
            
    except Exception as e:
        logger.error(f"Error getting webhook info: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/debug")
async def debug_info():
    """Debug endpoint –¥–ª—è Railway –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    import os
    import socket
    import sys
    import time
    
    logger.info("üîß Debug endpoint –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω!")
    
    try:
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        
        debug_data = {
            "environment": {
                "PORT": os.environ.get('PORT', 'not set'),
                "HOST": os.environ.get('HOST', 'not set'),
                "RAILWAY_ENVIRONMENT": os.environ.get('RAILWAY_ENVIRONMENT', 'not set'),
                "RAILWAY_PUBLIC_DOMAIN": os.environ.get('RAILWAY_PUBLIC_DOMAIN', 'not set'),
                "RAILWAY_PROJECT_ID": os.environ.get('RAILWAY_PROJECT_ID', 'not set'),
                "RAILWAY_SERVICE_ID": os.environ.get('RAILWAY_SERVICE_ID', 'not set')
            },
            "system": {
                "hostname": hostname,
                "local_ip": local_ip,
                "python_version": sys.version,
                "platform": sys.platform
            },
            "application": {
                "settings_app_port": settings.app_port,
                "settings_app_host": settings.app_host,
                "webhook_url": settings.telegram_webhook_url,
                "bot_token_set": bool(settings.telegram_bot_token != "DEMO_TOKEN")
            },
            "status": "debug_ok",
            "timestamp": time.time()
        }
        
        logger.info(f"üîß Debug info: {debug_data}")
        return debug_data
        
    except Exception as e:
        error_data = {
            "error": str(e),
            "status": "debug_error",
            "timestamp": time.time()
        }
        logger.error(f"‚ùå Debug endpoint error: {error_data}")
        return error_data


def create_app() -> FastAPI:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(
        log_level=settings.log_level,
        log_file="logs/medical_bot.log"
    )
    
    logger.info("Creating FastAPI application...")
    return app


def run_webhook_server():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –≤ webhook —Ä–µ–∂–∏–º–µ"""
    logger.info("Starting webhook server...")
    
    uvicorn.run(
        "src.api.webapp:app",
        host="0.0.0.0",
        port=settings.port,
        log_level=settings.log_level.lower(),
        access_log=True,
        reload=False  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º reload
    )


if __name__ == "__main__":
    run_webhook_server() 